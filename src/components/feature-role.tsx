import React, { useState } from 'react';
import {
  Form,
  Input,
  Checkbox,
  Row,
  Col,
  Button,
  Card,
  Typography,
  Divider,
} from 'antd';

const { Title } = Typography;

interface Feature {
  key: string;
  label: string;
}

const features: Feature[] = [
  { key: 'user', label: 'Qu·∫£n l√Ω ng∆∞·ªùi d√πng' },
  { key: 'content', label: 'Qu·∫£n l√Ω n·ªôi dung' },
  { key: 'disputes', label: 'X·ª≠ l√Ω tranh ch·∫•p' },
  { key: 'database', label: 'Qu·∫£n l√Ω c∆° s·ªü d·ªØ li·ªáu' },
  { key: 'finance', label: 'Qu·∫£n l√Ω t√†i ch√≠nh' },
  { key: 'report', label: 'B√°o c√°o' },
  { key: 'api', label: 'Ki·ªÉm so√°t API' },
  { key: 'repository', label: 'Qu·∫£n l√Ω kho m√£' },
  { key: 'payroll', label: 'Qu·∫£n l√Ω l∆∞∆°ng' },
];

const actions = ['ƒê·ªçc', 'Vi·∫øt', 'T·∫°o'];

type PermissionState = Record<string, string[]>;

interface RoleFormProps {
  onSuccess: () => void;
}

const RoleForm: React.FC<RoleFormProps> = ({ onSuccess }) => {
  const [form] = Form.useForm();
  const [permissions, setPermissions] = useState<PermissionState>({});

  const handleChange = (featureKey: string, checkedValues: string[]) => {
    setPermissions((prev) => ({
      ...prev,
      [featureKey]: checkedValues,
    }));
  };

  const handleSelectAll = () => {
    const all: PermissionState = {};
    features.forEach((f) => (all[f.key] = actions));
    setPermissions(all);
  };

  const handleSubmit = () => {
    const roleName = form.getFieldValue('roleName');
    console.log('üì§ Submitted:', { roleName, permissions });
    // TODO: G·ª≠i API t·∫°o role ·ªü ƒë√¢y
    onSuccess(); // ‚úÖ G·ªçi callback sau khi th√†nh c√¥ng
  };

  return (
    <Card style={{ maxWidth: 800, margin: '0 auto' }}>
      <Title level={3}>Th√™m vai tr√≤</Title>
      <Form layout="vertical" form={form} onFinish={handleSubmit}>
        <Form.Item
          label="T√™n vai tr√≤"
          name="roleName"
          rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p t√™n vai tr√≤!' }]}>
          <Input placeholder="Nh·∫≠p t√™n vai tr√≤" />
        </Form.Item>

        <Divider>Quy·ªÅn vai tr√≤</Divider>

        <Row justify="space-between" style={{ marginBottom: 12 }}>
          <Col>Quy·ªÅn truy c·∫≠p c·ªßa qu·∫£n tr·ªã vi√™n</Col>
          <Col>
            <Checkbox
              onChange={(e) => {
                if (e.target.checked) handleSelectAll();
                else setPermissions({});
              }}>
              Ch·ªçn t·∫•t c·∫£
            </Checkbox>
          </Col>
        </Row>

        {features.map((feature) => (
          <Row key={feature.key} style={{ marginBottom: 12 }}>
            <Col span={8}>{feature.label}</Col>
            <Col span={16} style={{ textAlign: 'right' }}>
              <Checkbox.Group
                options={actions}
                value={permissions[feature.key]}
                onChange={(vals) => handleChange(feature.key, vals as string[])}
              />
            </Col>
          </Row>
        ))}

        <Form.Item style={{ textAlign: 'center', marginTop: 40 }}>
          <Button htmlType="submit" type="primary">
            X√°c nh·∫≠n
          </Button>{' '}
          <Button
            htmlType="reset"
            onClick={() => {
              form.resetFields();
              setPermissions({});
            }}>
            H·ªßy b·ªè
          </Button>
        </Form.Item>
      </Form>
    </Card>
  );
};

export default RoleForm;
